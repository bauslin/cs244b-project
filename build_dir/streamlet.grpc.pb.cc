// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: streamlet.proto

#include "streamlet.pb.h"
#include "streamlet.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* Streamlet_method_names[] = {
  "/Streamlet/NotifyVote",
  "/Streamlet/ProposeBlock",
};

std::unique_ptr< Streamlet::Stub> Streamlet::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Streamlet::Stub> stub(new Streamlet::Stub(channel, options));
  return stub;
}

Streamlet::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_NotifyVote_(Streamlet_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProposeBlock_(Streamlet_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Streamlet::Stub::NotifyVote(::grpc::ClientContext* context, const ::Vote& request, ::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Vote, ::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NotifyVote_, context, request, response);
}

void Streamlet::Stub::async::NotifyVote(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Vote, ::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyVote_, context, request, response, std::move(f));
}

void Streamlet::Stub::async::NotifyVote(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Response>* Streamlet::Stub::PrepareAsyncNotifyVoteRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Response, ::Vote, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NotifyVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Response>* Streamlet::Stub::AsyncNotifyVoteRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Streamlet::Stub::ProposeBlock(::grpc::ClientContext* context, const ::Proposal& request, ::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Proposal, ::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProposeBlock_, context, request, response);
}

void Streamlet::Stub::async::ProposeBlock(::grpc::ClientContext* context, const ::Proposal* request, ::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Proposal, ::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposeBlock_, context, request, response, std::move(f));
}

void Streamlet::Stub::async::ProposeBlock(::grpc::ClientContext* context, const ::Proposal* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposeBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Response>* Streamlet::Stub::PrepareAsyncProposeBlockRaw(::grpc::ClientContext* context, const ::Proposal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Response, ::Proposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProposeBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Response>* Streamlet::Stub::AsyncProposeBlockRaw(::grpc::ClientContext* context, const ::Proposal& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposeBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

Streamlet::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streamlet_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Streamlet::Service, ::Vote, ::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Streamlet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Vote* req,
             ::Response* resp) {
               return service->NotifyVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Streamlet_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Streamlet::Service, ::Proposal, ::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Streamlet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Proposal* req,
             ::Response* resp) {
               return service->ProposeBlock(ctx, req, resp);
             }, this)));
}

Streamlet::Service::~Service() {
}

::grpc::Status Streamlet::Service::NotifyVote(::grpc::ServerContext* context, const ::Vote* request, ::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Streamlet::Service::ProposeBlock(::grpc::ServerContext* context, const ::Proposal* request, ::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


