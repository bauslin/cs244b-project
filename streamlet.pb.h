// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streamlet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_streamlet_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_streamlet_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_streamlet_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_streamlet_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_streamlet_2eproto;
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Proposal;
struct ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::Block* Arena::CreateMaybeMessage<::Block>(Arena*);
template <>
::Proposal* Arena::CreateMaybeMessage<::Proposal>(Arena*);
template <>
::Response* Arena::CreateMaybeMessage<::Response>(Arena*);
template <>
::Vote* Arena::CreateMaybeMessage<::Vote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_streamlet_2eproto;
};// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhashFieldNumber = 2,
    kTxnsFieldNumber = 4,
    kParentFieldNumber = 1,
    kEpochFieldNumber = 3,
  };
  // bytes phash = 2;
  void clear_phash() ;
  const std::string& phash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phash(Arg_&& arg, Args_... args);
  std::string* mutable_phash();
  PROTOBUF_NODISCARD std::string* release_phash();
  void set_allocated_phash(std::string* ptr);

  private:
  const std::string& _internal_phash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phash(
      const std::string& value);
  std::string* _internal_mutable_phash();

  public:
  // bytes txns = 4;
  void clear_txns() ;
  const std::string& txns() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_txns(Arg_&& arg, Args_... args);
  std::string* mutable_txns();
  PROTOBUF_NODISCARD std::string* release_txns();
  void set_allocated_txns(std::string* ptr);

  private:
  const std::string& _internal_txns() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txns(
      const std::string& value);
  std::string* _internal_mutable_txns();

  public:
  // uint64 parent = 1;
  void clear_parent() ;
  ::uint64_t parent() const;
  void set_parent(::uint64_t value);

  private:
  ::uint64_t _internal_parent() const;
  void _internal_set_parent(::uint64_t value);

  public:
  // uint64 epoch = 3;
  void clear_epoch() ;
  ::uint64_t epoch() const;
  void set_epoch(::uint64_t value);

  private:
  ::uint64_t _internal_epoch() const;
  void _internal_set_epoch(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txns_;
    ::uint64_t parent_;
    ::uint64_t epoch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streamlet_2eproto;
};// -------------------------------------------------------------------

class Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vote& from) {
    Vote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Vote";
  }
  protected:
  explicit Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kHashFieldNumber = 5,
    kParentFieldNumber = 3,
    kEpochFieldNumber = 4,
    kNodeFieldNumber = 1,
  };
  // bytes signature = 2;
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // bytes hash = 5;
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // uint64 parent = 3;
  void clear_parent() ;
  ::uint64_t parent() const;
  void set_parent(::uint64_t value);

  private:
  ::uint64_t _internal_parent() const;
  void _internal_set_parent(::uint64_t value);

  public:
  // uint64 epoch = 4;
  void clear_epoch() ;
  ::uint64_t epoch() const;
  void set_epoch(::uint64_t value);

  private:
  ::uint64_t _internal_epoch() const;
  void _internal_set_epoch(::uint64_t value);

  public:
  // uint32 node = 1;
  void clear_node() ;
  ::uint32_t node() const;
  void set_node(::uint32_t value);

  private:
  ::uint32_t _internal_node() const;
  void _internal_set_node(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::uint64_t parent_;
    ::uint64_t epoch_;
    ::uint32_t node_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streamlet_2eproto;
};// -------------------------------------------------------------------

class Proposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  ~Proposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Proposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Proposal& from) {
    Proposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Proposal";
  }
  protected:
  explicit Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kBlockFieldNumber = 3,
    kNodeFieldNumber = 1,
  };
  // bytes signature = 2;
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // .Block block = 3;
  bool has_block() const;
  void clear_block() ;
  const ::Block& block() const;
  PROTOBUF_NODISCARD ::Block* release_block();
  ::Block* mutable_block();
  void set_allocated_block(::Block* block);
  private:
  const ::Block& _internal_block() const;
  ::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::Block* block);
  ::Block* unsafe_arena_release_block();
  // uint32 node = 1;
  void clear_node() ;
  ::uint32_t node() const;
  void set_node(::uint32_t value);

  private:
  ::uint32_t _internal_node() const;
  void _internal_set_node(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Proposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::Block* block_;
    ::uint32_t node_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_streamlet_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Response

// -------------------------------------------------------------------

// Block

// uint64 parent = 1;
inline void Block::clear_parent() {
  _impl_.parent_ = ::uint64_t{0u};
}
inline ::uint64_t Block::parent() const {
  // @@protoc_insertion_point(field_get:Block.parent)
  return _internal_parent();
}
inline void Block::set_parent(::uint64_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:Block.parent)
}
inline ::uint64_t Block::_internal_parent() const {
  return _impl_.parent_;
}
inline void Block::_internal_set_parent(::uint64_t value) {
  ;
  _impl_.parent_ = value;
}

// bytes phash = 2;
inline void Block::clear_phash() {
  _impl_.phash_.ClearToEmpty();
}
inline const std::string& Block::phash() const {
  // @@protoc_insertion_point(field_get:Block.phash)
  return _internal_phash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Block::set_phash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.phash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Block.phash)
}
inline std::string* Block::mutable_phash() {
  std::string* _s = _internal_mutable_phash();
  // @@protoc_insertion_point(field_mutable:Block.phash)
  return _s;
}
inline const std::string& Block::_internal_phash() const {
  return _impl_.phash_.Get();
}
inline void Block::_internal_set_phash(const std::string& value) {
  ;


  _impl_.phash_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_phash() {
  ;
  return _impl_.phash_.Mutable( GetArenaForAllocation());
}
inline std::string* Block::release_phash() {
  // @@protoc_insertion_point(field_release:Block.phash)
  return _impl_.phash_.Release();
}
inline void Block::set_allocated_phash(std::string* value) {
  _impl_.phash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phash_.IsDefault()) {
          _impl_.phash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Block.phash)
}

// uint64 epoch = 3;
inline void Block::clear_epoch() {
  _impl_.epoch_ = ::uint64_t{0u};
}
inline ::uint64_t Block::epoch() const {
  // @@protoc_insertion_point(field_get:Block.epoch)
  return _internal_epoch();
}
inline void Block::set_epoch(::uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:Block.epoch)
}
inline ::uint64_t Block::_internal_epoch() const {
  return _impl_.epoch_;
}
inline void Block::_internal_set_epoch(::uint64_t value) {
  ;
  _impl_.epoch_ = value;
}

// bytes txns = 4;
inline void Block::clear_txns() {
  _impl_.txns_.ClearToEmpty();
}
inline const std::string& Block::txns() const {
  // @@protoc_insertion_point(field_get:Block.txns)
  return _internal_txns();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Block::set_txns(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.txns_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Block.txns)
}
inline std::string* Block::mutable_txns() {
  std::string* _s = _internal_mutable_txns();
  // @@protoc_insertion_point(field_mutable:Block.txns)
  return _s;
}
inline const std::string& Block::_internal_txns() const {
  return _impl_.txns_.Get();
}
inline void Block::_internal_set_txns(const std::string& value) {
  ;


  _impl_.txns_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_txns() {
  ;
  return _impl_.txns_.Mutable( GetArenaForAllocation());
}
inline std::string* Block::release_txns() {
  // @@protoc_insertion_point(field_release:Block.txns)
  return _impl_.txns_.Release();
}
inline void Block::set_allocated_txns(std::string* value) {
  _impl_.txns_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.txns_.IsDefault()) {
          _impl_.txns_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Block.txns)
}

// -------------------------------------------------------------------

// Vote

// uint32 node = 1;
inline void Vote::clear_node() {
  _impl_.node_ = 0u;
}
inline ::uint32_t Vote::node() const {
  // @@protoc_insertion_point(field_get:Vote.node)
  return _internal_node();
}
inline void Vote::set_node(::uint32_t value) {
  _internal_set_node(value);
  // @@protoc_insertion_point(field_set:Vote.node)
}
inline ::uint32_t Vote::_internal_node() const {
  return _impl_.node_;
}
inline void Vote::_internal_set_node(::uint32_t value) {
  ;
  _impl_.node_ = value;
}

// bytes signature = 2;
inline void Vote::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Vote::signature() const {
  // @@protoc_insertion_point(field_get:Vote.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Vote.signature)
}
inline std::string* Vote::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:Vote.signature)
  return _s;
}
inline const std::string& Vote::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Vote::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Vote::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* Vote::release_signature() {
  // @@protoc_insertion_point(field_release:Vote.signature)
  return _impl_.signature_.Release();
}
inline void Vote::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Vote.signature)
}

// uint64 parent = 3;
inline void Vote::clear_parent() {
  _impl_.parent_ = ::uint64_t{0u};
}
inline ::uint64_t Vote::parent() const {
  // @@protoc_insertion_point(field_get:Vote.parent)
  return _internal_parent();
}
inline void Vote::set_parent(::uint64_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:Vote.parent)
}
inline ::uint64_t Vote::_internal_parent() const {
  return _impl_.parent_;
}
inline void Vote::_internal_set_parent(::uint64_t value) {
  ;
  _impl_.parent_ = value;
}

// uint64 epoch = 4;
inline void Vote::clear_epoch() {
  _impl_.epoch_ = ::uint64_t{0u};
}
inline ::uint64_t Vote::epoch() const {
  // @@protoc_insertion_point(field_get:Vote.epoch)
  return _internal_epoch();
}
inline void Vote::set_epoch(::uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:Vote.epoch)
}
inline ::uint64_t Vote::_internal_epoch() const {
  return _impl_.epoch_;
}
inline void Vote::_internal_set_epoch(::uint64_t value) {
  ;
  _impl_.epoch_ = value;
}

// bytes hash = 5;
inline void Vote::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& Vote::hash() const {
  // @@protoc_insertion_point(field_get:Vote.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Vote.hash)
}
inline std::string* Vote::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:Vote.hash)
  return _s;
}
inline const std::string& Vote::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void Vote::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Vote::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Vote::release_hash() {
  // @@protoc_insertion_point(field_release:Vote.hash)
  return _impl_.hash_.Release();
}
inline void Vote::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Vote.hash)
}

// -------------------------------------------------------------------

// Proposal

// uint32 node = 1;
inline void Proposal::clear_node() {
  _impl_.node_ = 0u;
}
inline ::uint32_t Proposal::node() const {
  // @@protoc_insertion_point(field_get:Proposal.node)
  return _internal_node();
}
inline void Proposal::set_node(::uint32_t value) {
  _internal_set_node(value);
  // @@protoc_insertion_point(field_set:Proposal.node)
}
inline ::uint32_t Proposal::_internal_node() const {
  return _impl_.node_;
}
inline void Proposal::_internal_set_node(::uint32_t value) {
  ;
  _impl_.node_ = value;
}

// bytes signature = 2;
inline void Proposal::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Proposal::signature() const {
  // @@protoc_insertion_point(field_get:Proposal.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Proposal.signature)
}
inline std::string* Proposal::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:Proposal.signature)
  return _s;
}
inline const std::string& Proposal::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Proposal::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Proposal::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* Proposal::release_signature() {
  // @@protoc_insertion_point(field_release:Proposal.signature)
  return _impl_.signature_.Release();
}
inline void Proposal::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Proposal.signature)
}

// .Block block = 3;
inline bool Proposal::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_ != nullptr);
  return value;
}
inline void Proposal::clear_block() {
  if (_impl_.block_ != nullptr) _impl_.block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Block& Proposal::_internal_block() const {
  const ::Block* p = _impl_.block_;
  return p != nullptr ? *p : reinterpret_cast<const ::Block&>(
      ::_Block_default_instance_);
}
inline const ::Block& Proposal::block() const {
  // @@protoc_insertion_point(field_get:Proposal.block)
  return _internal_block();
}
inline void Proposal::unsafe_arena_set_allocated_block(
    ::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  _impl_.block_ = block;
  if (block) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proposal.block)
}
inline ::Block* Proposal::release_block() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Block* Proposal::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:Proposal.block)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
  return temp;
}
inline ::Block* Proposal::_internal_mutable_block() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_ == nullptr) {
    auto* p = CreateMaybeMessage<::Block>(GetArenaForAllocation());
    _impl_.block_ = p;
  }
  return _impl_.block_;
}
inline ::Block* Proposal::mutable_block() {
  ::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:Proposal.block)
  return _msg;
}
inline void Proposal::set_allocated_block(::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_ = block;
  // @@protoc_insertion_point(field_set_allocated:Proposal.block)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_streamlet_2eproto_2epb_2eh
