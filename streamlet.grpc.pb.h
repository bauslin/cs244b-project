// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: streamlet.proto
#ifndef GRPC_streamlet_2eproto__INCLUDED
#define GRPC_streamlet_2eproto__INCLUDED

#include "streamlet.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

// Streamlet service interface
class Streamlet final {
 public:
  static constexpr char const* service_full_name() {
    return "Streamlet";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Used by nodes to notify other nodes of their vote
    virtual ::grpc::Status NotifyVote(::grpc::ClientContext* context, const ::Vote& request, ::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> AsyncNotifyVote(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(AsyncNotifyVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> PrepareAsyncNotifyVote(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(PrepareAsyncNotifyVoteRaw(context, request, cq));
    }
    // Used by epoch leader to propse. Mostly the same as above
    // but explicit code path to verify the leader and epoch and
    // to facilitate implementing and testing different
    // interpretations of the protocol description
    virtual ::grpc::Status ProposeBlock(::grpc::ClientContext* context, const ::Vote& request, ::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> AsyncProposeBlock(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(AsyncProposeBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>> PrepareAsyncProposeBlock(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Response>>(PrepareAsyncProposeBlockRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Used by nodes to notify other nodes of their vote
      virtual void NotifyVote(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyVote(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Used by epoch leader to propse. Mostly the same as above
      // but explicit code path to verify the leader and epoch and
      // to facilitate implementing and testing different
      // interpretations of the protocol description
      virtual void ProposeBlock(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProposeBlock(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* AsyncNotifyVoteRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* PrepareAsyncNotifyVoteRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* AsyncProposeBlockRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Response>* PrepareAsyncProposeBlockRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status NotifyVote(::grpc::ClientContext* context, const ::Vote& request, ::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> AsyncNotifyVote(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(AsyncNotifyVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> PrepareAsyncNotifyVote(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(PrepareAsyncNotifyVoteRaw(context, request, cq));
    }
    ::grpc::Status ProposeBlock(::grpc::ClientContext* context, const ::Vote& request, ::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> AsyncProposeBlock(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(AsyncProposeBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>> PrepareAsyncProposeBlock(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Response>>(PrepareAsyncProposeBlockRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void NotifyVote(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void NotifyVote(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProposeBlock(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, std::function<void(::grpc::Status)>) override;
      void ProposeBlock(::grpc::ClientContext* context, const ::Vote* request, ::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Response>* AsyncNotifyVoteRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* PrepareAsyncNotifyVoteRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* AsyncProposeBlockRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Response>* PrepareAsyncProposeBlockRaw(::grpc::ClientContext* context, const ::Vote& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyVote_;
    const ::grpc::internal::RpcMethod rpcmethod_ProposeBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Used by nodes to notify other nodes of their vote
    virtual ::grpc::Status NotifyVote(::grpc::ServerContext* context, const ::Vote* request, ::Response* response);
    // Used by epoch leader to propse. Mostly the same as above
    // but explicit code path to verify the leader and epoch and
    // to facilitate implementing and testing different
    // interpretations of the protocol description
    virtual ::grpc::Status ProposeBlock(::grpc::ServerContext* context, const ::Vote* request, ::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyVote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NotifyVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyVote(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyVote(::grpc::ServerContext* context, ::Vote* request, ::grpc::ServerAsyncResponseWriter< ::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProposeBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProposeBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ProposeBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeBlock(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposeBlock(::grpc::ServerContext* context, ::Vote* request, ::grpc::ServerAsyncResponseWriter< ::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NotifyVote<WithAsyncMethod_ProposeBlock<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_NotifyVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NotifyVote() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Vote, ::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Vote* request, ::Response* response) { return this->NotifyVote(context, request, response); }));}
    void SetMessageAllocatorFor_NotifyVote(
        ::grpc::MessageAllocator< ::Vote, ::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Vote, ::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NotifyVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyVote(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyVote(
      ::grpc::CallbackServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProposeBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProposeBlock() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Vote, ::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Vote* request, ::Response* response) { return this->ProposeBlock(context, request, response); }));}
    void SetMessageAllocatorFor_ProposeBlock(
        ::grpc::MessageAllocator< ::Vote, ::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Vote, ::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProposeBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeBlock(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProposeBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_NotifyVote<WithCallbackMethod_ProposeBlock<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NotifyVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyVote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NotifyVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyVote(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProposeBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProposeBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ProposeBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeBlock(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyVote() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NotifyVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyVote(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProposeBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProposeBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ProposeBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeBlock(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposeBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NotifyVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NotifyVote() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NotifyVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_NotifyVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyVote(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProposeBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProposeBlock() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProposeBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProposeBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProposeBlock(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProposeBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyVote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Vote, ::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Vote, ::Response>* streamer) {
                       return this->StreamedNotifyVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NotifyVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyVote(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Vote,::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProposeBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProposeBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Vote, ::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Vote, ::Response>* streamer) {
                       return this->StreamedProposeBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProposeBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProposeBlock(::grpc::ServerContext* /*context*/, const ::Vote* /*request*/, ::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProposeBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Vote,::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NotifyVote<WithStreamedUnaryMethod_ProposeBlock<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NotifyVote<WithStreamedUnaryMethod_ProposeBlock<Service > > StreamedService;
};


#endif  // GRPC_streamlet_2eproto__INCLUDED
